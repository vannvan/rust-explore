// ‰ºòÂåñÁâàÊú¨
extern crate clap;

use clap::{App, Arg}; // ÂëΩ‰ª§Ë°å
use std::fs::File;
use std::io::{Read, Write}; // Ê≥®ÊÑèËøôÈáåÊåáÂÆöÊùÉÈôê
use std::path::Path;
use std::process;

fn main() {
    let _matches = App::new("kt")
        .version("1.0.0")
        .author("vannvan")
        .about("‰∏Ä‰∏™Á±ª‰ººcatÂëΩ‰ª§ÁöÑrustÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑")
        .arg(
            Arg::with_name("FILE")
                .help("File to print.")
                .empty_values(false),
        )
        .get_matches();

    if let Some(file) = _matches.value_of("FILE") {
        println!("üòÄÁõÆÊ†áÊñá‰ª∂: {}", file);
        if Path::new(&file).exists() {
            match File::open(file) {
                Ok(mut f) => {
                    let mut data = String::new();
                    f.read_to_string(&mut data)
                        .expect("[kt Error] Êñá‰ª∂ËØªÂèñÂ§±Ë¥•");

                    let stdout = std::io::stdout(); // Ëé∑ÂèñÂÖ®Â±Ä stdout ÂØπË±°
                    let mut handle = std::io::BufWriter::new(stdout); // ÂèØÈÄâÈ°πÔºöÂ∞Ü handle ÂåÖË£ÖÂú®ÁºìÂÜ≤Âå∫‰∏≠
                    match writeln!(&mut handle, "{}", data) {
                        Ok(_res) => {}
                        Err(err) => {
                            eprintln!("[kt Error] ÂÜÖÂÆπËæìÂá∫ÈîôËØØ. {:?}", err);
                            process::exit(1)
                        }
                    }
                }
                Err(err) => {
                    eprintln!("[ht Error] Êñá‰ª∂ËØªÂèñÂ§±Ë¥•. {:?}", err);
                    process::exit(1)
                }
            }
        } else {
            eprintln!("[kt Error] Êñá‰ª∂‰∏çÂ≠òÂú®");
            process::exit(1)
        }
    }
}
